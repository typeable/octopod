apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "octopod.fullname" . }}
  labels:
    {{- include "octopod.labels" . | nindent 4 }}
  annotations:
    reloader.stakater.com/auto: "true"
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "octopod.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
        {{- with .Values.podAnnotations }}
          {{- toYaml . | nindent 8 }}
        {{- end }}
        {{- if .Values.vault.enabled }}
        vault.hashicorp.com/agent-inject: 'true'
        vault.hashicorp.com/agent-init-first: 'true'
        vault.hashicorp.com/auth-path: 'auth/{{ .Values.vault.clusterName }}'
        vault.hashicorp.com/role: {{ .Values.vault.clusterName | quote}}
        {{- range $kv_store, $secret := .Values.octopod.vaultEnv }}
        {{- range $secret_name, $secret_values := $secret }}
        vault.hashicorp.com/agent-inject-secret-{{ $secret_name }}: '{{ $kv_store }}/{{ $secret_name }}'
        vault.hashicorp.com/agent-inject-template-{{ $secret_name }}: |
          {{ "{{" }} with secret "{{ $kv_store }}/{{ $secret_name }}" {{ "-}}" }}
            {{- range $secret_values }}
            export {{ .name }}="{{ "{{" }} .Data.data.{{ .key }} {{ "}}" }}"
            {{- end }}
          {{ "{{-" }} end {{ "}}" }}
        {{- end }}
        {{- end }}
        {{- end }}
      labels:
        {{- include "octopod.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "octopod.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      initContainers:
        - name: copy-migrations
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          command:
          - "bash"
          - "-ec"
          - |
            set -ex

            # copy migrations
            cp -av /migrations/* /mymigrations

            # create sqitch.conf
            echo '[core]' > /mymigrations/sqitch.conf
            echo 'engine = pg' >> /mymigrations/sqitch.conf
            echo 'plan_file = sqitch.plan' >> /mymigrations/sqitch.conf
            echo 'top_dir = .' >> /mymigrations/sqitch.conf
            echo '[engine "pg"]' >> /mymigrations/sqitch.conf
            echo '  registry = sqitch' >> /mymigrations/sqitch.conf
            echo '[deploy]' >> /mymigrations/sqitch.conf
            echo '  verify = true' >> /mymigrations/sqitch.conf
            echo '[rebase]' >> /mymigrations/sqitch.conf
            echo '  verify = true' >> /mymigrations/sqitch.conf
            echo '[target "octopod"]' >> /mymigrations/sqitch.conf
            echo 'uri = db:pg://{{ .Values.postgresql.postgresqlUsername }}:$(PG_PASS)@{{ include "postgresqlHost" . }}/{{ .Values.postgresql.postgresqlDatabase }}' >> /mymigrations/sqitch.conf
          env:
            - name: PG_PASS
              valueFrom:
                secretKeyRef:
                  name: {{ include "postgresqlSecretName" . }}
                  key: postgresql-password
          volumeMounts:
          - name: migrations
            mountPath: /mymigrations
        - name: run-migrations
          image: "{{ .Values.sqitch.image.repository }}:{{ .Values.sqitch.image.tag }}"
          command:
          - "bash"
          - "-c"
          - |
            set -x
            echo 'checking connection to postgresql...'
            for i in $(seq 1 6); do psql "postgres://{{ .Values.postgresql.postgresqlUsername }}:$(PG_PASS)@{{ include "postgresqlHost" . }}/{{ .Values.postgresql.postgresqlDatabase }}" -c ''; if [ $? -eq 0 ]; then break; fi; sleep 10; done
            set -e
            echo 'run migrations...'
            cd /migrations && /usr/local/bin/sqitch deploy octopod
          env:
            - name: PG_PASS
              valueFrom:
                secretKeyRef:
                  name: {{ include "postgresqlSecretName" . }}
                  key: postgresql-password
          volumeMounts:
          - name: migrations
            mountPath: /migrations
        - name: copy-control-scripts
          image: "{{ .Values.controlScripts.image.repository }}:{{ .Values.controlScripts.image.tag }}"
          imagePullPolicy: {{ .Values.controlScripts.image.pullPolicy }}
          command:
          - sh
          - -c
          - 'cp /utils/* /copy/'
          volumeMounts:
          - name: control-scripts
            mountPath: /copy
  
        - name: run-init
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          command:
          - sh
          - -c
          - |
            {{- if .Values.vault.enabled }}
            for i in /vault/secrets/*;do source $i;done
            {{- end }}
            /utils/init
          envFrom:
            - configMapRef:
                name: {{ include "octopod.fullname" . }}
          volumeMounts:
          - name: home
            mountPath: /home/octopod
          - name: control-scripts
            mountPath: {{ include "controlScriptsPath" . }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
        - name: copy-www
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          command:
          - sh
          - -c
          - |
            set -ex
            cp -a /www/* /copy/
            find /www -type f -exec touch {} +
          volumeMounts:
          - name: www
            mountPath: /copy
      containers:
        - name: octopod
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
          - containerPort: 4443
            protocol: TCP
          - containerPort: 4000
            protocol: TCP
          command:
          - "sh"
          - "-ec"
          - |
            {{- if .Values.vault.enabled }}
            for i in /vault/secrets/*;do source $i;done
            {{- end }}
            exec $ENTRYPOINT \
            --port {{ .Values.service.ports.powerApp | quote }} \
            --ui-port {{ .Values.service.ports.app | quote }} \
            --ws-port {{ .Values.service.ports.ws | quote }} \
            --db host="'{{ include "postgresqlHost" . }}' port=5432 user='{{ .Values.postgresql.postgresqlUsername }}' password=$(PG_PASS)" \
            --db-pool-size "10"
          envFrom:
            - configMapRef:
                name: {{ include "octopod.fullname" . }}
          env:
            - name: PG_PASS
              valueFrom:
                secretKeyRef:
                  name: {{ include "postgresqlSecretName" . }}
                  key: postgresql-password
          {{- if not .Values.vault.enabled }}
            - name: POWER_AUTHORIZATION_HEADER
              valueFrom:
                secretKeyRef:
                  name: {{ include "octopodCliAuthSecretName" . }}
                  key: cli-secret
          {{- end }}
          volumeMounts:
          - name: home
            mountPath: /home/octopod
          - name: control-scripts
            mountPath: {{ include "controlScriptsPath" . }}
          readinessProbe:
            httpGet:
              port: {{ .Values.service.ports.app }}
              path: /api/v1/ping
            periodSeconds: 20
          livenessProbe:
            httpGet:
              port: {{ .Values.service.ports.app }}
              path: /api/v1/ping
            initialDelaySeconds: 15
            periodSeconds: 5
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
        - name: nginx
          image: nginx:1.17.5
          volumeMounts:
          - name: nginx-config
            mountPath: /etc/nginx/conf.d/app.conf
            subPath: app.conf
          - name: nginx-config
            mountPath: /www/config.json
            subPath: config.json
          - name: www
            mountPath: /www
          ports:
          - containerPort: {{ .Values.service.ports.ui }}
            protocol: TCP
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      volumes:
      - name: home
        emptyDir: {}
      - name: control-scripts
        emptyDir: {}
      - name: www
        emptyDir: {}
      - name: migrations
        emptyDir: {}
      - name: nginx-config
        configMap:
          name: {{ include "octopod.fullname" . }}-nginx-config
